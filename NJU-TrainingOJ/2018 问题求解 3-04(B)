/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-10-28 23:36
* Filename      : B.cpp
* Description   : Please contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
const int MaxEdge = 200;
const int MaxNode = 25;
int T=0;
int N,M=0;
int num = 0;

typedef struct{
    int a,b,price;
}Edge;
Edge edge[MaxEdge];
int f[MaxNode] = {0};
int r[MaxNode] = {0};
int look[MaxEdge] = {0};

int cmp(const void *a, const void *b){
    return ((Edge*)a)->price - ((Edge*)b)->price;
}

void init_set(int n){
    for(int i(1); i<=n; ++i){
        f[i] = i;
        r[i] = 0;
    }
    // for(int i(0); i<n; ++i){
        // cout<<"f is "<<f[i]<<endl;
        // cout<<"r is "<<r[i]<<endl;
    // }
}

int find_set(int x){
    if(f[x] != x){
        f[x] = find_set(f[x]);
    }
    return f[x];
}

void union_set(int a, int b){
    int fa = find_set(a);
    int fb = find_set(b);
    if(r[a]>r[b])f[fa] = fb;
    else{
        f[fb] = fa;
        if(r[fa] == r[fb])r[fa]++;
    }
}

int Krustal(int n, bool flag){
    // cout<<"n is "<<n<<endl;
    qsort(edge, n, sizeof(edge[0]), cmp);
    // cout<<"edge is :"<<endl;
    // for(int i(0); i<n; ++i){
        // cout<<edge[i].price<<endl;
    // }
    int res = 0;
    for(int i(0); i<n; ++i){
        // cout<<find_set(edge[i].a)<<" vs "<<find_set(edge[i].b)<<endl;
        if(find_set(edge[i].a)!=find_set(edge[i].b)){
            union_set(edge[i].a, edge[i].b);
            // cout<<"node a is "<<edge[i].a<<" node b is "<<edge[i].b<<endl;
            res += edge[i].price;
            if(flag){
                look[num] = i;
                num++;
            }
        }
    }
    return res;
}

int main(){
    int a,b,price=0;
    scanf("%d%*c",&T);
    while(T--){
        num = 0;
        scanf("%d %d%*c",&N,&M);
        init_set(N);
        for(int i(0); i<M; ++i){
            scanf("%d%d%d%*c",&a,&b,&price);
            edge[i].a = a;
            edge[i].b = b;
            edge[i].price = price;
        }
        int fmin = Krustal(M,1);
        // for(int i(0); i<num; ++i){
            // cout<<"array look is "<<look[i]<<endl;
        // }
        // cout<<"fmin is "<<fmin<<endl;
        int smin = INF;
        // cout<<"num is "<<num<<endl;
        for(int j(0); j<num; ++j){
            int ans = 0;
            init_set(N);
            int temp = edge[look[j]].price;
            // cout<<"array look is "<<look[j]<<endl;
            // cout<<"temp is "<<temp<<endl;
            edge[look[j]].price = INF;
            ans = Krustal(M,0);
            edge[M-1].price = temp;
            qsort(edge, M, sizeof(edge[0]), cmp);
            // cout<<"ans is "<<ans<<endl;
            if(ans < smin){
                smin = ans;
            }
        }
        // cout<<"smin is "<<smin<<endl;
        if(fmin == smin)printf("Peter can find other ways\n");
        else printf("%d\n",fmin);
        // cout<<endl<<endl<<endl;
    }
    return 0;
}
