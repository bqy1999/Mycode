/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-11-01 15:01
* Filename      : A.cpp
* Description   : Please contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
 
int maze[105][105];
int vis[105][105];
int dis[105][105];
int maxr, maxc = 0;
int begx, begy = 0;
int endx, endy = 0;
 
struct node{
    int r,c;
    node(int r, int c):r(r),c(c){}
    node(){}
}pre[105][105];
queue<node> q;
 
void visit(int r, int c, int nr, int nc){
    vis[nr][nc]=1;
    q.push(node(nr,nc));
    dis[nr][nc]=1+dis[r][c];
    pre[nr][nc]=node(r,c);
    if(nr==endx && nc==endy){
        return;
    }
}
 
void BFS(){
    while(!q.empty())q.pop();
    // cout<<"hello"<<endl;
    memset(vis,0,sizeof(vis));
    memset(dis,0,sizeof(dis));
    dis[begx][begy] = 0;
    vis[begx][begy] = 1;
    // cout<<"hello1"<<endl;
    q.push(node(begx,begy));
    while(!q.empty()){
        // cout<<"hello2"<<endl;
        node no = q.front();
        // cout<<q.front().r<<" "<<q.front().c<<endl;
        q.pop();
        int r = no.r;
        int c = no.c;
        int nr,nc = 0;
        if(r-1 >= 0 && vis[r-1][c]==0 && maze[r-1][c]==0){
            nr = r-1;
            nc = c;
            visit(r,c,nr,nc);
        }
        //up
        if(r+1<maxr && vis[r+1][c]==0 && maze[r+1][c]==0){
            nr = r+1;
            nc = c;
            visit(r,c,nr,nc);
        }
        //down
        if(c-1 >= 0 && vis[r][c-1]==0 && maze[r][c-1]==0){
            nr = r;
            nc = c-1;
            visit(r,c,nr,nc);
        }
        //left
        if(c+1<maxc && vis[r][c+1]==0 && maze[r][c+1]==0){
            nr = r;
            nc = c+1;
            visit(r,c,nr,nc);
        }
        //right
    }
}
 
int main(){
    char op;
    scanf("%d%d%*c", &maxr, &maxc);
    // cout<<"maxr="<<maxr<<" maxc="<<maxc<<endl;
    for(int i(0); i<maxr; ++i){
        for(int j(0); j<maxc; ++j){
            op = getchar();
            switch(op){
                case '#':   maze[i][j] = 1; break;
                case '.':   maze[i][j] = 0; break;
                case 'S':   maze[i][j] = 0; begx = i; begy = j; break;
                case 'G':   maze[i][j] = 0; endx = i; endy = j; break;
            }
        }
        getchar();
    }
/*
    for(int i(0); i<maxr; ++i){
        for(int j(0); j<maxc; ++j){
            cout<<maze[i][j];
        }
        cout<<endl;
    }
*/
    BFS();
    printf("%d\n",dis[endx][endy]);
 
    return 0;
}
