/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-11-15 10:36
* Filename      : B.cpp
* Description   : Please contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
#define maxn 105
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const ll INF = 0x3f3f3f3f;
int n, m1, m2 = 0; // block num, bridge of main world, bridge of shade world
int t, k = 0; // gate num, need num
int a, b, v = 0;
int gate[maxn] = {0};
int need[maxn] = {0};
ll e1[maxn][maxn] = {0};
ll e2[maxn][maxn] = {0};
priority_queue<ll, vector<ll>, greater<ll> > que;

void init(){
    for(int i(1); i <= n; ++i){
        for(int j(1); j <= n; ++j){
            e1[i][j] = INF;
            e2[i][j] = INF;
            if(i==j){
                e1[i][i] = 0;
                e2[i][i] = 0;
            }
        }
    }
    while(!que.empty())que.pop();
}

ll floyd(){
    ll ans = 0;
    for(int i(1); i<=n; ++i){
        for(int j(1); j<=n; ++j){
            for(int k(1); k<=n; ++k){
                e1[j][k] = min(e1[j][k], e1[j][i]+e1[i][k]); 
                e2[j][k] = min(e2[j][k], e2[j][i]+e2[i][k]); 
            }
        }
    }
    for(int i(0); i<t; ++i){
        if(e1[1][gate[i]]+e2[gate[i]][need[i]]>=INF)que.push(INF);
        else que.push(e1[1][gate[i]]+e2[gate[i]][need[i]]);
    }
    // cout<<que.top()<<endl;
    // que.pop();
    // cout<<que.top()<<endl;
    while(k--){
        if(que.top()>=INF)return -1;
        else{
            ans+=que.top();
            que.pop();
        }
    }
    return ans;
}

int main(){
    scanf("%d%d%d%*c", &n, &m1, &m2);
    scanf("%d%d%*c", &t, &k);
    init();
    for(int i(0); i<t; ++i){
        scanf("%d", &gate[i]);
    }
    getchar();
    for(int i(0); i<t; ++i){
        scanf("%d", &need[i]);
    }
    getchar();
    for(int i(0); i<m1; ++i){
        scanf("%d%d%d%*c", &a, &b, &v);
        e1[a][b] = v;
    }
    for(int i(0); i<m2; ++i){
        scanf("%d%d%d%*c", &a, &b, &v);
        e2[a][b] = v;
    }
    cout<<floyd()<<endl;
    return 0;
}
