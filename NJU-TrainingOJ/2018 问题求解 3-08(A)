/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-11-22 10:18
* Filename      : A.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
#define maxn 10005
#define maxm 50005
int n, m = 0;
int scc, nume, numv, ok, ans, id;
int pre[maxn], vis[maxn], dfn[maxn], low[maxn], sta[maxn], cnt[maxn];
bool out[maxn];

struct Edge{
    int to;
    int next;
}edge[maxm];

void addEdge(int u, int v){
    edge[nume].to = v;
    edge[nume].next = pre[u];
    pre[u] = nume++;
}

void init(){
    memset(pre, -1, sizeof(pre));
    memset(vis, 0, sizeof(vis));
    memset(out, 0, sizeof(out));
    memset(cnt, 0, sizeof(cnt));
    memset(dfn, 0, sizeof(dfn));
    memset(sta, 0, sizeof(sta));
    scc = nume = numv = ok = ans = id = 0;
}

void tarjan(int cur){
    int u, v = 0;
    dfn[cur] = low[cur] = ++numv; 
    vis[cur] = 1;
    sta[id++] = cur;
    for(int i(pre[cur]); i!=-1; i = edge[i].next){
        v = edge[i].to;
        if(!vis[v])tarjan(v);
        if(vis[v]==1)low[cur] = min(low[cur], low[v]);
    }
    if(dfn[cur] == low[cur]){
        scc++;
        do{
            cnt[scc]++;
            u = sta[--id];
            low[u] = scc;
            vis[u] = 2;
        }while(u != cur);
    }
}

void solve(){
    ok = 0;
    for(int i(1); i<=n; ++i)
        if(!vis[i])tarjan(i);
    for(int i(1); i<=n; ++i)
        for(int j(pre[i]); j != -1; j = edge[j].next)
            if(low[i] != low[edge[j].to]){
                out[low[i]]=1;
                break;
            }
    for(int i(1); i<=scc; ++i)
        if(!out[i]){
            if(++ok > 1)break;
            ans = cnt[i];
        }
    if(ok!=1)printf("0\n");
    else printf("%d\n", ans);

}

int main(){
    while(scanf("%d%d%*c", &n, &m)==2){
        init();
        int a, b;
        for(int i(0); i<m; ++i){
            scanf("%d%d%*c", &a, &b);
            addEdge(a,b);
        }
        solve();
    }
    return 0;
}
