/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-12-13 13:06
* Filename      : C.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
#define maxn 505
#define maxm 1010
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
struct node{
    int x;
    int y;
    bool add;
};
node an[maxn];
node bn[maxn];

int n, a, b = 0;
int l[maxm], lx[maxm], ly[maxm], s[maxm];
int vx[maxm], vy[maxm], w[maxm][maxm];

inline bool dfs(int x){
    int t = 0;
    vx[x] = 1;
    for(int k(1); k<=n; ++k){
        if(vy[k]) continue;
        t = lx[x] + ly[k] - w[x][k];
        if(t == 0){
            vy[k] = 1;
            if(l[k] == -1 || dfs(l[k])){
                l[k] = x;
                return true;
            }
        }else if(s[k] > t) s[k] = t;
    }
    return false;
}

inline int KM(){
    int d = 0;
    int ans = 0;
    memset(l, -1, sizeof(l));
    memset(ly, 0, sizeof(ly));
    for(int x(1); x<=n; ++x){
        memset(s, INF, sizeof(s));
        while(true){
            memset(vx, 0, sizeof(vx));
            memset(vy, 0, sizeof(vy));
            if(dfs(x)) break;
            d = INF;
            for(int i(1); i<=n; ++i) if(!vy[i] && d>s[i]) d = s[i];
            for(int i(1); i<=n; ++i) if(vx[i]) lx[i] -= d;
            for(int i(1); i<=n; ++i) if(vy[i]) ly[i] += d; else s[i] -= d;
        }
    }
    for(int i(1); i<=n; ++i) if(l[i] > -1) ans += w[l[i]][i];
    return ans;
}

int main(){
    scanf("%d%d%*c", &a, &b);
    for(int i(1); i<=a; ++i){
        scanf("%d%d%*c", &an[i].x, &an[i].y);
        an[i].add = false;
    }
    for(int i(1); i<=b; ++i){
        scanf("%d%d%*c", &bn[i].x, &bn[i].y);
        bn[i].add = false;
    }
    n = max(a,b);
    for(int i(a+1); i<=n; ++i) an[i].add = true;
    for(int i(b+1); i<=n; ++i) bn[i].add = true;
    for(int i(1); i<=n; ++i){
        for(int j(1); j<=n; ++j){
            if(an[i].add || bn[j].add) w[i][j] = 0;
            else w[i][j] = -abs(an[i].x - bn[j].x) - abs(an[i].y - bn[j].y);
            lx[i] = max(lx[i], w[i][j]);
        }
    }
    printf("%d\n", -KM());
    return 0;
}
