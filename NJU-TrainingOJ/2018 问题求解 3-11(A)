/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-12-13 13:36
* Filename      : A.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
const int N = 205;

struct Node{
    int to;
    int cap;
    int rev;
};
vector<Node> v[N];
bool used[N];

inline void add_Node(int from, int to, int cap){
    v[from].push_back((Node){to, cap, v[to].size()});
    v[to].push_back((Node){from, 0, v[from].size()-1});
}

inline int dfs(int s, int t, int f){
    if(s == t) return f;
    used[s] = true;
    for(int i(0); i<v[s].size(); ++i){
        Node &tmp = v[s][i];
        if(used[tmp.to] == false && tmp.cap > 0){
            int d = dfs(tmp.to, t, min(f, tmp.cap));
            if(d > 0){
                tmp.cap -= d;
                v[tmp.to][tmp.rev].cap += d;
                return d;
            }
        }
    }
    return 0;
}

inline int max_flow(int s, int t){
    int flow = 0;
    for(;;){
        memset(used, false, sizeof(used));
        int f = dfs(s, t, INF);
        if(f == 0) return flow;
        flow += f;
    }
}

int main(){
    int n, m, s, t = 0;
    scanf("%d%d%d%d%*c", &n, &m, &s, &t);
    memset(v, 0, sizeof(v));
    for(int i(0); i<m; ++i){
        int x, y, z;
        scanf("%d%d%d%*c", &x, &y, &z);
        add_Node(x, y, z);
    }
    printf("%d\n", max_flow(s, t));
    return 0;
}
