/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-12-13 14:41
* Filename      : C.cpp
* Description   : 最小割
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
const int maxm = 1050;
const int maxn = 210;
int N, M = 0;

struct edge{
    int to;
    int cap;
    int rev;
};
vector<edge> G[maxm];
int level[maxm];
int iter[maxm];
int A[maxn], B[maxn];
int a[maxm], b[maxm], w[maxm];

inline void add(int from, int to, int cap){
    G[from].push_back((edge){to, cap, G[to].size()});
    G[to].push_back((edge){from, 0, G[from].size()-1});
}

inline void bfs(int s){
    memset(level, -1, sizeof(level));
    queue<int> que;
    level[s] = 0;
    que.push(s);
    while(!que.empty()){
        int v = que.front();
        que.pop();
        for(int i(0); i<G[v].size(); ++i){
            edge &e = G[v][i];
            if(e.cap > 0 && level[e.to] < 0){
                level[e.to] = level[v] + 1;
                que.push(e.to);
            }
        }
    }
}

inline int dfs(int v, int t, int f){
    if(v==t) return f;
    for(int &i = iter[v]; i<G[v].size(); ++i){
        edge &e = G[v][i];
        if(e.cap > 0 && level[v] < level[e.to]){
            int d = dfs(e.to, t, min(f, e.cap));
            if(d > 0){
                e.cap -= d;
                G[e.to][e.rev].cap += d;
                return d;
            }
        }
    }
    return 0;
}

inline int max_flow(int s, int t){
    int ans = 0;
    for(;;){
        bfs(s);
        if(level[t] < 0) return ans;
        memset(iter, 0, sizeof(iter));
        int f = 0;
        while((f = dfs(s, t, INF)) > 0) ans += f;
    }
}


int main(){
    scanf("%d%d%*c", &N, &M);
    for(int i(0); i<N; ++i){
        scanf("%d%d%*c", &A[i], &B[i]);
    }
    for(int i(0); i<M; ++i){
        scanf("%d%d%d%*c", &a[i], &b[i], &w[i]);
    }
    int s = N, t = s+1;
    for(int i(0); i<N; ++i){
        add(i, t, A[i]);
        add(s, i, B[i]);
    }
    for(int i(0); i<M; ++i){
        add(a[i]-1, b[i]-1, w[i]);
        add(b[i]-1, a[i]-1, w[i]);
    }
    printf("%d\n", max_flow(s, t));
    return 0;
}
