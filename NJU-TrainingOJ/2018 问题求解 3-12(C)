/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-12-18 10:31
* Filename      : C.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
#define maxn 5050
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
int n, m, k = 0;

struct Edge{
    int to;
    int cap;
    int rev;
};
vector<Edge> v[maxn];
bool used[maxn];

inline void add_Edge(int from, int to, int cap){
    v[from].push_back((Edge){to, cap, v[to].size()});
    v[to].push_back((Edge){from, 0, v[from].size()-1});
}

inline int dfs(int s, int t, int f){
    if (s == t)return f;
    used[s] = true;
    for(int i(0); i<v[s].size(); ++i){
        Edge &tmp = v[s][i];
        if(used[tmp.to] == false && tmp.cap >0){
            int d = dfs(tmp.to, t, min(f, tmp.cap));
            if(d > 0){
                tmp.cap -= d;
                v[tmp.to][tmp.rev].cap += d;
                return d;
            }
        }
    }
    return 0;
}

inline int max_flow(int s, int t){
    int ans = 0;
    for(;;){
        memset(used, false, sizeof(used));
        int f = dfs(s, t, INF);
        if(f==0) return ans;
        ans += f;
    }
}

inline void init(){
    for(int i(1); i<=n; ++i){
        for(int j(1); j<=m; ++j){
            add_Edge((i-1)*m+j, n*m+(i-1)*m+j, 1);
            if(i!=1) add_Edge(n*m+(i-1)*m+j, (i-2)*m+j, 1);
            if(j!=1) add_Edge(n*m+(i-1)*m+j, (i-1)*m+j-1, 1);
            if(i!=n) add_Edge(n*m+(i-1)*m+j, (i)*m+j, 1);
            if(j!=m) add_Edge(n*m+(i-1)*m+j, (i-1)*m+j+1, 1);
        }
    }
    for(int i(1); i<=m; ++i){
        add_Edge(n*m+i, 2*n*m+1, INF);
        add_Edge(2*n*m-m+i, 2*n*m+1, INF);
    }
    for(int i(2); i<=n-1; ++i){
        add_Edge((n+i-1)*m+1, 2*n*m+1, INF);
        add_Edge((n+i)*m, 2*n*m+1, INF);
    }
}

int main(){
    scanf("%d%d%d", &n, &m, &k);
    init();
    int x, y = 0;
    for(int i(0); i<k; ++i){
        scanf("%d%d", &x, &y);
        add_Edge(0, (x-1)*m+y, INF);
    }
    int res = max_flow(0, 2*n*m+1);
    if(res == k) printf("possible\n");
    else printf("not possible\n");
    return 0;
}
