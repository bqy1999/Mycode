/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2019-03-07 11:37
* Filename      : A.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
#define maxn 1500
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
int T = 0;
int tot = 0;
ll x, y = 0;
ll f[20][200][maxn];
int prime[maxn];
bool notp[maxn];
int a[20];

void get_prime() {
    notp[0]=true;
    notp[1]=true;
    for(int i(2); i<maxn; ++i) {
        if(!notp[i]) prime[++tot]=i;
        for(int j(1); j<=tot&&i*prime[j]<maxn; ++j) {
            notp[i*prime[j]]=true;
            if(i%prime[j]==0) break;
        }
    }
}

ll dfs(int pos, int limit, int sum, int squ) {
    ll res = 0;
    if(pos<=0)
        return ((!notp[sum])&&(!notp[squ]));
    if(!limit&&f[pos][sum][squ]!=-1)
        return f[pos][sum][squ];
    int lim = limit ? a[pos]:9;
    for(int i(0); i<=lim; ++i)
        res += dfs(pos-1, limit&&(i==lim), sum+i, squ+i*i);
    if(!limit)
        f[pos][sum][squ]=res;
    return res;
}

ll solve(ll bit) {
    int len = 0;
    while(bit) {
        a[++len] = bit %10;
        bit /= 10;
    }
    return dfs(len, 1, 0, 0);
}

int main() {
    memset(f, -1, sizeof(f));
    scanf("%d%*c", &T);
    get_prime();
    while(T--) {
        scanf("%lld%lld%*c", &x, &y);
        printf("%lld\n", solve(y)-solve(x-1));
    }
    return 0;
}
