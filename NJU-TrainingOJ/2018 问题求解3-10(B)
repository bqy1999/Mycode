/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2018-12-12 16:04
* Filename      : B.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
#define maxn 400
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int INF = 0x3f3f3f3f;
int T, r, c = 0;
char t[40][10];
int ct[40][10];
bool M[maxn][maxn];
bool check[maxn];
int match[maxn];

bool dfs(int order, int n){
    for(int i(0); i<n; ++i){
        if(M[order][i] && !check[i]){
            check[i] = true;
            if(match[i] == -1 || dfs(match[i], n)){
                match[i] = order;
                return true;
            }
        }
    }
    return false;
}

int hungary(int n){
    int ans = 0;
    for(int i(0); i<n; ++i)
        match[i] = -1;
    for(int i(0); i<n; ++i){
        for(int j(0); j<n; ++j){
            check[j] = false;
        }
        if(dfs(i, n)) ans++;
    }
    return ans;
}

void init(int order){
    for(int i(0); i<order; ++i){
        for(int j(0); j<order; ++j){
            M[i][j] = false;
        }
    }
}

int main(){
    scanf("%d", &T);
    while(T--){
        scanf("%d%d", &r, &c);
        for(int i(0); i<r; ++i){
            scanf("%s", t[i]);
        }

        int order = 0;
        for(int i(0); i<r; ++i){
            for(int j(0); j<c; ++j){
                if(t[i][j] == '*'){
                    ct[i][j] = order;
                    order++;
                }else ct[i][j] = -1;
            }
        }

        init(order);

        for(int i(0); i<r; ++i){
            for(int j(0); j<c; ++j){
                int cur = ct[i][j];
                if(ct[i][j] != -1){
                    if(j > 0 && ct[i][j-1] != -1){
                        M[cur][ct[i][j-1]] = true;
                    }
                    if(j < c-1 && ct[i][j+1] != -1){
                        M[cur][ct[i][j+1]] = true;
                    }
                    if(i > 0 && ct[i-1][j] != -1){
                        M[cur][ct[i-1][j]] = true;
                    }
                    if(i < r-1 && ct[i+1][j] != -1){
                        M[cur][ct[i+1][j]] = true;
                    }
                }
            }
        }
        printf("%d\n", order-hungary(order)/2);
    }
    return 0;
}
