//思路：维护一个小堆，每次从中pop出最小的元素。
//前i个数组操作过后得出的最小元素和第i+1个数组的最小元素之和，定为新的最小值
//将最小值pop出去之后
//将数组下标往后移一位，变成第i+1个数组的第二小元素和前i个数组的最小元素相加，
//将这个新的和放到小堆中，在pop出最小的元素
//这是最小元素有两种可能，前i个最小的和第i+1个第二小之和，或者前i个第二小的和第i+1个最小的之和；
//如果为前者，就将前i个最小的和第i+1个第三小之和放入小堆中；如果为后者，就将前i个第二小的和第i+1个第二小的放入小堆中
//再pop出最小的元素
//如此循环n次则可得前i+1个数组操作后，前n个小的元素！

#include<cstdio>
#include<iostream>
#include<cmath>
#include<cstring>
#include<queue>
#include<algorithm>
using namespace std;

int t,m,n=0;
int a[105][2005];
int sum[2005];
bool cmp(int a,int b){
    return a<b;
}
void Work(){
    int temp[2005];
    for(int i=1;i<=n;++i){
        sum[i]=a[1][i];
    }
    make_heap(&sum[1],&sum[n+1],cmp);

    for(int i=2;i<=m;++i){
        for(int j=1;j<=n;++j){
            temp[j]=sum[j]+a[i][1];
        }
        make_heap(&temp[1],&temp[n+1],cmp);
        sort(sum+1,sum+1+n);
        for(int j=2;j<=n;++j){
            for(int k=1;k<=n;++k){
                if(sum[k]+a[i][j]<temp[1]){
                    pop_heap(&temp[1],&temp[n+1]);
                    temp[n]=sum[k]+a[i][j];
                    push_heap(&temp[1],&temp[n+1]);
                }
                else break;
            }
        }
        for(int j=1;j<=n;++j)sum[j]=temp[j];
    }
}
int main(){
    scanf("%d",&t);
    while(t--){
        scanf("%d %d",&m,&n);
        for(int i=1;i<=m;++i){
            for(int j=1;j<=n;++j){
                scanf("%d",&a[i][j]);
            }
            sort(a[i]+1,a[i]+n+1);
        }
        Work();
        sort(sum+1,sum+n+1);
        for(int i=1;i<n;++i)cout<<sum[i]<<" ";
        cout<<sum[n]<<endl;
    }
    return 0;
}
