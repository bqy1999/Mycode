/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2019-03-04 15:03
* Filename      : B.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double EPS = 1e-6;
const int INF = 0x3f3f3f3f;
#define MAXM 10005
#define MAXN 1005
int id[MAXN+MAXM];
double v[MAXN];
double a[MAXM][MAXN];
int T, n, m = 0;
// n is the number of variable
// m is the number of limit

// default format is solve the maximum
// limit is less than constant

void init() {
    int ui, vi = 0;
    int node, edge = 0;
    int A, B, C = 0;
    memset(a, 0, sizeof(a));
    memset(id, 0, sizeof(id));
    memset(v, 0, sizeof(v));

    scanf("%d%d%*c", &node, &edge);
    n=2*edge+2;
    m=4*node+edge+2;

    for(int i(1); i<=edge; ++i) {
        scanf("%d%d%*c", &ui, &vi);
        ui++;
        vi++;

        a[i][0]=1;
        a[i][2*i-1]=1;
        a[i][2*i]=1;

        a[edge+2+ui][2*i-1]=1;
        a[edge+2+vi][2*i-1]=-1;
        a[edge+node+2+ui][2*i]=1;
        a[edge+node+2+vi][2*i]=-1;
        a[edge+2*node+2+ui][2*i-1]=-1;
        a[edge+2*node+2+vi][2*i-1]=1;
        a[edge+3*node+2+ui][2*i]=-1;
        a[edge+3*node+2+vi][2*i]=1;
    }
    scanf("%d%d%d%*c", &A, &B, &C);
    A++;
    B++;
    C++;

    for(int i(0); i<=n; ++i) {
        a[edge+2+B][i]=0;
        a[edge+node+2+C][i]=0;
        a[edge+2*node+2+B][i]=0;
        a[edge+3*node+2+C][i]=0;
    }
    a[edge+1][0]=1;
    a[edge+1][2*edge+1]=1;
    a[edge+2][0]=1;
    a[edge+2][2*edge+2]=1;

    a[edge+2+A][2*edge+1]=-1;
    a[edge+2+node+B][2*edge+2]=-1;
    a[edge+2+2*node+A][2*edge+1]=1;
    a[edge+2+3*node+B][2*edge+2]=1;

    a[0][2*edge+1]=1;
    a[0][2*edge+2]=1;

    // show the coef of matrix A
    // for(int i(0); i<=m; ++i) {
    // for(int j(0); j<=n; ++j)
    // cout<<a[i][j]<<" ";
    // cout<<endl;
    // }
}

int sgn(double x) {
    if (x < -EPS) return -1;
    return x > EPS ? 1 : 0;
}

void pivot(int r, int c) {
    swap(id[n + r], id[c]);
    double x = -a[r][c];
    a[r][c] = -1;
    for (int i = 0; i <= n; ++i)
        a[r][i] /= x;
    for (int i = 0; i <= m; ++i) {
        if (sgn(a[i][c]) && i != r) {
            x = a[i][c];
            a[i][c] = 0;
            for (int j = 0; j <= n; ++j) a[i][j] += x * a[r][j];
        }
    }
}

int simplex() {
    /* important: revert symbols of conditions */

    for (int i = 1; i <= m; ++i)
        for (int j = 1; j <= n; ++j)
            a[i][j] *= -1;

    for (int i = 1; i <= n; ++i)
        id[i] = i;
    /* initial-simplex */
    while (true) {
        int x = 0, y = 0;
        for (int i = 1; i <= m; ++i) {
            if (sgn(a[i][0]) < 0) {
                x = i;
                break;
            }
        }
        if (!x)
            break;
        for (int i = 1; i <= n; ++i) {
            if (sgn(a[x][i]) > 0) {
                y = i;
                break;
            }
        }
        if (!y)
            return -1; // infeasible
        pivot(x, y);
        // cout<<"x="<<x<<endl;
        // cout<<"y="<<y<<endl;
    }

    /* solve-simplex */
    while (true) {
        int x = 0;
        int y = 0;
        for (int i = 1; i <= n; ++i) {
            if (sgn(a[0][i]) > 0) {
                x = i;
                break;
            }
        }
        if (!x)
            break; // finished
        double w, t = 0;
        bool f = true;
        for (int i = 1; i <= m; ++i) {
            if (sgn(a[i][x]) < 0) {
                t = -a[i][0] / a[i][x];
                if (f || t < w) {
                    w = t;
                    y = i;
                    f = false;
                }
            }
        }
        if (!y) {
            break;
            // cout<<"unbounded"<<endl;
            // return 1;    // unbounded
        }
        pivot(y, x);
        // cout<<"x="<<x<<endl;
        // cout<<"y="<<y<<endl;
    }

    for (int i = 1; i <= n; ++i)
        v[i] = 0;
    for (int i = n + 1; i <= n + m; ++i) {
        v[id[i]] = a[i - n][0];
    }
    // target function
    // for(int i(1); i<=n; ++i)
    // cout<<v[i]<<" ";
    // cout<<endl;

    // cout<<(int)(a[0][0])<<endl;
    // for(int i(1); i<=n; ++i)
    // printf("%d ", id[i]);
    // printf("\n");
    return 0;
}

int main() {
    scanf("%d%*c", &T);
    while(T--) {
        init();
        simplex();
        // int ans=simplex();
        if(abs(a[0][0]-2)<EPS)
            printf("yes\n");
        else
            printf("no\n");
    }
    return 0;
}
