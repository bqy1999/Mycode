/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2019-03-29 10:06
* Filename      : B.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double EPS = 1e-6;
const int MOD = 1e9+7;
const int INF = 0x3f3f3f3f;
#define MAXN 1005

struct Node {
    ll x;
    ll y;
    ll z;
};
Node node[MAXN];
int f[MAXN];
ll r[MAXN];
bool ground[MAXN];
bool sky[MAXN];

inline void init() {
    memset(f,0,sizeof(f));
    memset(r,0,sizeof(r));
    memset(ground,false,sizeof(ground));
    memset(sky,false,sizeof(sky));
}

inline void init_set(int x) {
    for(int i(1); i<=x; ++i) {
        f[i] = i;
        r[i] = 0;
    }
}
inline int find_set(int x) {
    if(f[x]!=x) {
        int fx = f[x];
        f[x] = find_set(fx);
        r[x] = (r[x]+r[fx])%2;
    }
    return f[x];
}
inline void union_set(int a, int b) {
    int fa = find_set(a);
    int fb = find_set(b);
    f[fa] = fb;
    r[fa] = (r[a]+r[b]+1)%2;
}

int main() {
    int T = 0;
    ll N, H, R = 0;
    scanf("%d%*c", &T);
    while(T--) {
        init();
        scanf("%lld%lld%lld%*c", &N, &H, &R);
        init_set(N);
        for(int i(1); i<=N; ++i) {
            scanf("%lld%lld%lld%*c", &node[i].x, &node[i].y, &node[i].z);
            if(node[i].z <= R)
                ground[i] = true;
            if(node[i].z >= H-R)
                sky[i] = true;
            for(int j(1); j<i; ++j) {
                int fi = find_set(i);
                int fj = find_set(j);
                ll dis = pow(node[i].x-node[j].x,2)+pow(node[i].y-node[j].y,2)+pow(node[i].z-node[j].z,2);
                // cout<<"dis="<<dis<<endl;
                if(fi!=fj && dis <= pow(2*R,2))
                    union_set(i,j);
            }
        }
        bool flag = false;
        for(int i(1); i<=N; ++i) {
            if(ground[i])
                ground[find_set(i)] = true;
            if(sky[i])
                sky[find_set(i)] =  true;
        }
        for(int i(1); i<=N; ++i)
            if(ground[i]&&sky[i])
                flag = true;
        if(flag) printf("Yes\n");
        else printf("No\n");
    }
    return 0;
}
