/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2019-04-15 14:05
* Filename      : D.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double EPS = 1e-6;
const int MOD = 1e9+7;
const int INF = 0x3f3f3f3f;

#define MAXN 505
#define MAXM 130005
int f[MAXN] = {0};
int r[MAXN] = {0};
int P, S = 0;

typedef struct {
    int a;
    int b;
    double price;
} Edge;
Edge edge[MAXM];

bool cmp(Edge a, Edge b) {
    return a.price < b.price;
}

inline void init_set(int n) {
    for(int i(1); i<=n; ++i) {
        f[i] = i;
        r[i] = 0;
    }
}

inline int find_set(int x) {
    if(f[x] != x)
        f[x] = find_set(f[x]);
    return f[x];
}

inline void union_set(int a, int b) {
    int fa = find_set(a);
    int fb = find_set(b);
    if(r[a]>r[b])
        f[fa] = fb;
    else {
        f[fb] = fa;
        if(r[fa] == r[fb])
            ++r[fa];
    }
}

double ans[MAXM];

inline void Krustal(int n, int m) {
    // cout<<"n="<<n<<endl;
    // cout<<"m="<<m<<endl;
    sort(edge, edge+m, cmp);
    int cnt = 0;
    for(int i(0); i<m; ++i) {
        if(find_set(edge[i].a) != find_set(edge[i].b)) {
            union_set(edge[i].a, edge[i].b);
            ans[cnt] = edge[i].price;
            ++cnt;
            n--;
            if(n==1)
                return;
        }
        // cout<<ans[i]<<endl;
    }
    return;
}

inline double dis(pair<int, int>a, pair<int, int>b) {
    return sqrt(pow(a.first-b.first, 2)+pow(a.second-b.second, 2));
}

int main() {
    pair<int, int> node[MAXN];
    scanf("%d%d%*c", &S, &P);
    init_set(P);
    for(int i(1); i<=P; ++i)
        scanf("%d%d", &node[i].first, &node[i].second);
    ll M = 0;
    for(int i(1); i<=P; ++i) {
        for(int j(i+1); j<=P; ++j) {
            edge[M].a = i;
            edge[M].b = j;
            edge[M].price = dis(node[i], node[j]);
            ++M;
        }
    }
    Krustal(P, M);
    printf("%.2f\n", ans[P-S-1]);
    return 0;
}
