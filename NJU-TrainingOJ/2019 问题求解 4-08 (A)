/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2019-04-15 22:39
* Filename      : A.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
const int MAXN = 2010;

struct node {
    int v, w, next;
} edge[MAXN];

int head[MAXN], cnt = 0, degree[MAXN];
int vis[MAXN], ok[MAXN];

void add(int u, int v, int w) {
    edge[++cnt].v = v;
    edge[cnt].w = w;
    edge[cnt].next = head[u];
    head[u] = cnt;
}

void DFS( int u) {
    int cnt = 0;
    ok[u] = 1;
    vis[u] = 1;
    for(int i = head[u]; i != 0; i = edge[i].next) {
        int v = edge[i].v;
        if(degree[v] > 1) {
            cnt++;
            if(cnt == 3)
                return;
        }
    }
    for(int i = head[u]; i != 0; i = edge[i].next) {
        int v = edge[i].v;
        if(vis[v] == 0) {
            if(degree[v] == 1)
                ok[v] = 1;
            else
                DFS(v);
        }
    }
}

int main() {
    int n, m, nCase = 0;
    while(~scanf("%d", &n) && n) {
        cnt = 0;
        memset(degree, 0, sizeof(degree));
        memset(head, 0, sizeof(head));
        memset(vis, 0, sizeof(vis));
        memset(ok, 0, sizeof(ok));
        set<int> s;
        scanf("%d", &m);
        for(int i = 0; i < m; ++i) {
            int u, v;
            scanf("%d %d", &u, &v);
            degree[u]++;
            degree[v]++;
            add(u, v, 1);
            add(v, u, 1);
            s.insert(u);
            s.insert(v);
        }
        int num = (int)s.size(), flag = 0;
        if(num - 1 != m ) {
            printf("Case %d: 955\n", ++nCase);
            continue;
        }
        for(int i = 1; i <= n; ++i) {
            if(degree[i] > 1) {
                DFS(i);
                break;
            }
        }
        for(int i = 1; i <= n; ++i) {
            if(ok[i] != 1)
                flag = 1;
        }
        if(flag)
            printf("Case %d: 955\n", ++nCase);
        else
            printf("Case %d: 996\n", ++nCase);
    }
    return 0;
}
