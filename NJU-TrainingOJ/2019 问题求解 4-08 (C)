/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2019-04-29 10:16
* Filename      : C.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double EPS = 1e-6;
const int MOD = 1e9+7;
const int INF = 0x3f3f3f3f;

int f[10005],h[10005],n;
int st[4][2]= {{1,0},{-1,0},{0,1},{0,-1}};
char s[105][105];

inline int find_set(int x) {
    return f[x]==x?x:f[x]=find_set(f[x]);
}

inline void union_set(int x,int y) {
    int r1=find_set(x);
    int r2=find_set(y);
    if(r1!=r2)
        h[r1]+=h[r2],f[r2]=f[r1];
}

inline int dfs(int fi,int fj) {
    if(f[fi*n+fj]!=-1)
        return find_set(fi*n+fj);
    f[fi*n+fj]=fi*n+fj,h[fi*n+fj]=1;
    for(int k=0; k<4; ++k) {
        int i=fi+st[k][0];
        int j=fj+st[k][1];
        if(i>=0&&i<n&&j>=0&&j<n&&s[fi][fj]!=s[i][j])
            union_set(fi*n+fj,dfs(i,j));
    }
    return find_set(fi*n+fj);
}
int main() {
    int t;
    scanf("%d%d",&n,&t);
    memset(f,-1,4*n*n);
    for(int i=0; i<n; i++)scanf("%s",s[i]);
    int i,j;
    while(t--) {
        scanf("%d%d",&i,&j);
        printf("%d\n",h[dfs(i-1,j-1)]);
    }
    return 0;
}
