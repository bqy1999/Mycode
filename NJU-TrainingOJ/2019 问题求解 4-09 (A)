/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2019-05-05 10:27
* Filename      : A.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double EPS = 1e-6;
const int MOD = 1e9+7;
const int INF = 0x3f3f3f3f;
#define MAXN 505

int n, m = 0;
int u, v, w = 0;
int tmp = 0;
int arr[MAXN];
int mat[MAXN][MAXN];
int T = 0;
int x, y, t = 0;

typedef pair<int, int> P;
bool cmp(const P p1, const P p2) {
    return p1.second < p2.second;
}
P que[MAXN];

inline void update(int k) {
    for(int i(0); i<n; ++i)
        for(int j(0); j<n; ++j)
            if(mat[i][j]>mat[i][k]+mat[k][j])
                mat[i][j] = mat[j][i] = mat[i][k]+mat[k][j];
    return;
}

int main() {
    scanf("%d%d%*c", &n, &m);
    int cnt = 0;
    for(int i(0); i<n; ++i) {
        scanf("%d", &tmp);
        arr[i] = tmp;
        que[cnt] = P(i, tmp);
        ++cnt;
    }
    sort(que, que+n, cmp);
    // for(int i(0); i<n; ++i)
    // printf("%d %d\n", que[i].first, que[i].second);
    for(int i(0); i<n; ++i)
        for(int j(0); j<n; ++j) {
            if(i==j)
                mat[i][j] = 0;
            else
                mat[i][j] = INF;
        }
    for(int i(0); i<m; ++i) {
        scanf("%d%d%d%*c", &u, &v, &w);
        mat[u][v] = mat[v][u] = w;
    }
    scanf("%d%*c", &T);
    int cur = 0;
    while(T--) {
        scanf("%d%d%d%*c", &x, &y, &t);
        while(que[cur].second <= t && cur<n) {
            update(que[cur].first);
            ++cur;
        }
        if(arr[x] > t || arr[y] > t)
            printf("-1\n");
        else {
            if(mat[x][y] == INF)
                printf("-1\n");
            else
                printf("%d\n", mat[x][y]);
        }
    }
    return 0;
}
