/*********************************************************
* Author        : ArthurBi
* Email         : Arthurbqy1999@gmail.com
* Last modified : 2019-05-17 11:37
* Filename      : C.cpp
* Description   : Pls contact me if you have questions.
*********************************************************/
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <bitset>
#include <cstdlib>
#include <cmath>
#include <set>
#include <list>
#include <deque>
#include <map>
#include <queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double EPS = 1e-6;
const int MOD = 1e9+7;
const int INF = 0x3f3f3f3f;
#define MAXN 1010

vector<int>G[MAXN];
int dis[MAXN][MAXN],bian[MAXN][MAXN];
int n, m, dfs_clock, edgenum;
int pre[MAXN], low[MAXN], f[MAXN];
bool su;

inline int find_set(int x) {
    return x==f[x]?x:f[x]=find_set(f[x]);
}

inline void union_set(int u,int v) {
    int fa=find_set(u),fb=find_set(v);
    f[fa]=fb;
}

struct node {
    int u,v,d;
} edge[MAXN];

void insert(int u,int v,int d) {
    node E= {u,v,d};
    edge[edgenum++]=E;
}

int dfs(int u,int fa) {
    if(su)
        return 0;
    int lowu=pre[u]= ++ dfs_clock;
    int child=0;
    for(int i=0; i<G[u].size(); ++i) {
        int v=G[u][i];
        if(!pre[v]) {
            ++child;
            int lowv=dfs(v,u);
            lowu = min(lowu, lowv);
            if(lowv > pre[u]&&bian[u][v]==1) {
                insert(u,v,dis[u][v]);
                if(dis[u][v]<=1)
                    return 0;
            }
        } else if(pre[v] < pre[u] && v!=fa)
            lowu = min(lowu, pre[v]);
    }
    return low[u]=lowu;
}

inline void Cut() {
    memset(pre,0,sizeof(pre));
    dfs_clock=0;
    dfs(1,-1);
}

int main() {
    int i,u,v,d;
    scanf("%d%d%*c",&n,&m);
    memset(bian,0,sizeof(bian));
    for(i=1; i<=n; ++i) {
        G[i].clear();
        f[i]=i;
        for(int j=1; j<=n; j++)
            dis[i][j]=INF;
    }

    while(m--) {
        scanf("%d %d %d",&u,&v,&d);
        if(dis[u][v]==INF) {
            G[u].push_back(v);
            G[v].push_back(u);
            union_set(u,v);
        }
        dis[u][v]=dis[v][u]=min(dis[u][v],d);
        bian[u][v]++;
        bian[v][u]++;
    }

    bool fa=false;
    find_set(1);
    for(i=1; i<=n; ++i)if(find_set(i)!=f[1]) {
            fa=true;
            break;
        }
    if(fa) {
        printf("0\n");
        return 0;
    }

    su=false;
    edgenum=0;
    Cut();

    if(edgenum) {
        int ans=INF;
        for(i=0; i<edgenum; ++i)
            ans=min(ans,edge[i].d);
        if(ans==INF)
            ans=-1;
        else if(ans==0)
            ans=0;
        printf("%d\n",ans);
    } else printf("-1\n");
    return 0;
}
