%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% File: hw.tex 						   %
% Description: LaTeX template for homework.                %
%
% Feel free to modify it (mainly the 'preamble' file).     %
% Contact hfwei@nju.edu.cn (Hengfeng Wei) for suggestions. %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% IMPORTANT NOTE: Compile this file using 'XeLaTeX' (not 'PDFLaTeX') %
%
% If you are using TeXLive 2016 on windows,                          %
% you may need to check the following post:                          %
% https://tex.stackexchange.com/q/325278/23098                       %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass[11pt, a4paper, UTF8]{ctexart}
\input{preamble}  % modify this file if necessary

\usepackage{algorithm}
\usepackage{algorithmic}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{graphicx}
%Tikz画图
\usepackage{tikz}
\usetikzlibrary{arrows,graphs} %指明是图库
\lstset{
    columns=fixed,       
    numbers=left,                                        % 在左侧显示行号
    numberstyle=\tiny\color{gray},                       % 设定行号格式
    frame=none,                                          % 不显示背景边框
    backgroundcolor=\color[RGB]{245,245,244},            % 设定背景颜色
    keywordstyle=\color[RGB]{40,40,255},                 % 设定关键字颜色
    numberstyle=\footnotesize\color{darkgray},           
    commentstyle=\it\color[RGB]{0,96,96},                % 设置代码注释的格式
    stringstyle=\rmfamily\slshape\color[RGB]{128,0,0},   % 设置字符串格式
    showstringspaces=false,                              % 不显示字符串中的空格
    language=c++,                                        % 设置语言
}  
\lstset{breaklines}

%%%%%%%%%%%%%%%%%%%%
\title{3-8：多元最短路径算法}
\me{毕秋宇}{171860624}
\date{\today}     % you can specify a date like ``2017年9月30日''.
%%%%%%%%%%%%%%%%%%%%
\begin{document}
\maketitle
%%%%%%%%%%%%%%%%%%%%
\noplagiarism	% always keep this
%%%%%%%%%%%%%%%%%%%%
\beginthishw	% begin ``this homework (hw)'' part

%%%%%%%%%%
\begin{problem}[TC: 25.1-4]	
    Show that matrix multiplication deﬁned by $\textsc{Extend-Shortest-Paths}$ is associative.
\end{problem}

% \begin{solution}
    % \

\begin{proof}
    设$X,Y,Z$是三个$n^2$的矩阵，由定义可知$(X\times Y)_{ij}=min(x_{ik} + y_{kj})$。因此$(X\times(Y\times Z))_{ij} = min(x_{ik} + min(y_{km} + z_{mj})) = min(min(x_{ik} + y_{km} + z_{mj}))$。且$((X\times Y)\times Z)_{ij} = min(min(x_{ik} + y_{km}) + z_{mj}) = min(min(x_{ik} + y_{km} + z_{mj})) = (X\times(Y\times Z))_{ij}$。所以证明了$((X\times Y)\times Z) = (X\times(Y\times Z))$,即定义的矩阵乘法是相关的。
\end{proof}

% \end{solution}
%%%%%%%%%%
% \newpage
%%%%%%%%%%
\begin{problem}[TC: 25.1-5] 
  % A problem here.
    Show how to express the single-source shortest-paths problem as a product of matrices and a vector. Describe how evaluating this product corresponds to a BellmanFord-like algorithm (see Section 24.1).
\end{problem}

\begin{solution}
    假设单源最短路径问题的根结点为$v_i$，则矩阵可以表示为$L$的第$i$行向量，矩阵的乘积跟多元最短路径算法一致。乘积的计算过程对应了$\textsc{Bellman-Ford}$算法伪代码的第3、4行$relax$操作。

\end{solution}

%%%%%%%%%%
% \newpage
%%%%%%%%%%
\begin{problem}[TC: 25.1-6]
    Suppose we also wish to compute the vertices on shortest paths in the algorithms of this section. Show how to compute the predecessor matrix $\Pi$ from the completed matrix $L$ of shortest-path weights in $O(n^3)$ time.
\end{problem}

\begin{solution}
\begin{algorithm}
\caption{Find-$\Pi(G)$}
\label{alg1}
\begin{algorithmic}
    \FOR{$i$ from $1$ to $n$}
    \FOR{$j$ from $1$ to $n$}
    \FOR{$k$ from $1$ to $n$}
    \IF{$l_{ij} = l_{ik} + w_{kj}$}
    \STATE $\Pi_{ij} = k$
    \ENDIF
    \ENDFOR
    \ENDFOR
    \ENDFOR
\end{algorithmic}
\end{algorithm}
\end{solution}

  % 假设这是一道需要证明的题目。
% \begin{remark}	
%   Refer to book.
% \end{remark}

% \begin{proof}
%   证明略。	
% \end{proof}
%%%%%%%%%%

%%%%%%%%%%
\begin{problem}[TC: 25.1-9]
  % A problem here.
    Modify $\textsc{Faster-All-Paths-Shortest-Paths}$ so that it can determine whether the graph contains a negative-weight cycle.

\end{problem}

\begin{solution}
\begin{algorithm}
    \caption{$\textsc{Have-Negative-Cycle}(V)$}
\label{alg1}
\begin{algorithmic}
    \FOR{$i$ from $1$ to $n$}
    \IF{$l_{ii} \neq 0$}
    \RETURN $true$
    \ENDIF
    \ENDFOR
    \RETURN $false$
\end{algorithmic}
\end{algorithm}

\end{solution}
%%%%%%%%%%

%%%%%%%%%%
\begin{problem}[TC: 25.1-10]
  % A problem here.
    Give an efﬁcient algorithm to ﬁnd the length (number of edges) of a minimumlength negative-weight cycle in a graph.
\end{problem}

\begin{solution}
  % Solution here.
    在每次计算$L^{m}$的时候运行$\textsc{Have-Negative-Cycle}$算法，当首次返回$true$的时候，得到的$m$即为环路的最短长度。

\end{solution}
%%%%%%%%%%

%%%%%%%%%%
\begin{problem}[TC: 25.2-2]
    Show how to compute the transitive closure using the technique of Section 25.1.

\end{problem}

\begin{solution}
  % Solution here.
    将25.1节中的$\textsc{Extend-Shortest-Paths}$算法中的$min$改为$\lor$，将$+$改为$\land$则达到$\textsc{Transitive-Closure}$算法。

\end{solution}
%%%%%%%%%%

%%%%%%%%%%
\begin{problem}[TC: 25.2-4]
    As it appears above, the Floyd-Warshall algorithm requires $\Theta{n^3}$ space, since we compute $d_{ij}^{(k)}$ for $i,j,k = 1,2,\cdots,n$. Show that the following procedure, which simply drops all the superscripts, is correct, and thus only $\Theta(n^2)$ space is required.

\begin{algorithm}
    \caption{$\textsc{Floyd-Warshall'}(W)$}
\label{alg1}
\begin{algorithmic}
    \STATE $n = W.rows$
    \STATE $D = W$
    \FOR{ $k=1$ $\textbf{to}$ n}
    \FOR{ $i=1$ $\textbf{to}$ n}
    \FOR{ $j=1$ $\textbf{to}$ n}
    \STATE $d_{ij} =$ min$(d_{ij},d_{ik}+d_{kj})$
    \ENDFOR
    \ENDFOR
    \ENDFOR
\end{algorithmic}
\end{algorithm}
\end{problem}

\begin{solution}
    原本代码中为$d_{ij}^{k} = min(d_{ij}^{k-1},d_{ik}^{(k-1)} + d_{kj}^{(k-1)})$。由于算法最外层循环是按照$k$进行的，所以在进行第$k$次运算的时候，$d_{ij}$和$d_{ik},d_{kj}$必定为$d_{ij}^{(k-1)}$和$d_{ik}^{(k-1)},d_{kj}^{(k-1)}$，所以算法的空间复杂度为$\Theta(n^2)$。

\end{solution}
%%%%%%%%%%

%%%%%%%%%%
\begin{problem}[TC: 25.2-6]
  % A problem here.
    How can we use the output of the Floyd-Warshall algorithm to detect the presence of a negative-weight cycle?
\end{problem}

\begin{solution}
    与25.1-9类似，对于$\textsc{Floyd-Warshall}(G)$
\begin{algorithm}
    \caption{$\textsc{Have-Negative-Cycle2}(V)$}
\label{alg1}
\begin{algorithmic}
    \FOR{$i$ from $1$ to $n$}
    \IF{$l_{ii} \neq 0$}
    \RETURN $true$
    \ENDIF
    \ENDFOR
    \RETURN $false$
\end{algorithmic}
\end{algorithm}
\end{solution}
%%%%%%%%%%

%%%%%%%%%%
\begin{problem}[TC: 25.2-8]
  % A problem here.
    Give an $O(VE)$time algorithm for computing the transitive closure of a directed graph $G=(V, E)$.
\end{problem}

\begin{solution}
  % Solution here.
    使用$DFS$来计算传递闭包，对于每一个结点使用$DFS$，一共有$E$条边，所以总共的时间复杂度为$O(VE)$。
\end{solution}
%%%%%%%%%%

%%%%%%%%%%
\begin{problem}[TC: 25.3-2]
  % A problem here.
    What is the purpose of adding the new vertex $s$ to $V$ , yielding $V'$ ?
\end{problem}

\begin{solution}
    加入了新结点$s$之后，才能通过伪代码第6$\sim$7行计算得到非负的新权重$\hat{w}$，这样才能够接着使用$\textsc{Dijkstra}$算法。

\end{solution}
%%%%%%%%%%

%%%%%%%%%%
\begin{problem}[TC: 25.3-3]
  % A problem here.
    Suppose that $w(u,v)\geq 0$ for all edges $(u,v)\in E$. What is the relationship between the weight functions $w$ and $\hat{w}$?

\end{problem}

\begin{solution}
  % Solution here.
    由于对于所有的边$(u,v)\in E$，都有$w(u,v)\geq 0$，所以对于任意的结点$x$，都有$h(x) = 0$，所以根据伪代码第7行有$\hat{w}= w$。

\end{solution}
%%%%%%%%%%

%%%%%%%%%%
\begin{problem}[TC: 25-2]
  % A problem here.
    Shortest paths in $\varepsilon$-dense graphs
    
    \noindent A graph $G=(V,E)$ is $\varepsilon$-dense if $|E|=\Theta(V^{1+\varepsilon})$ for some constant $\varepsilon$ in the range $0 < \varepsilon \leq 1$. By using d-ary min-heaps (see Problem 6-2) in shortest-paths algorithms on $\varepsilon$-dense graphs, we can match the running times of Fibonacci-heapbased algorithms without using as complicated a data structure.

    $\textbf{a}$. What are the asymptotic running times for $\textsc{Insert}$, $\textsc{Exteract-Min}$, and $\textsc{Decrease-Key}$, as a function of d and the number n of elements in a $d$-ary min-heap? What are these running times if we choose $d=\Theta(n^{\alpha})$ for some constant $0< \alpha \leq 1$? Compare these running times to the amortized costs of these operations for a Fibonacci heap.

    $\textbf{b}$. Show how to compute shortest paths from a single source on an $\varepsilon$-dense directed graph $G=(V,E)$ with no negative-weight edges in $O(E)$ time. ($Hint$: Pick $d$ as a function of $\varepsilon$.)

    $\textbf{c}$. Show how to solve the all-pairs shortest-paths problem on an $\varepsilon$-dense directed graph $G = (V,E)$ with no negative-weight edges in $O(VE)$ time.

    $\textbf{d}$. Show how to solve the all-pairs shortest-paths problem in $O(VE)$ time on an $\varepsilon$-dense direscted graph $G=(V,E)$ that may have negative-weight edges but has no negative-weight cycles.
\end{problem}

\begin{solution}
    \noindent $\textbf{a}$. $\textsc{Insert}$和$\textsc{Decrease-Key}$操作的渐进运行时间是$log_{d}n$，而$\textsc{Extract-Min}$的渐进运行时间是$dlog_{d}n$。如果选择$d=\Theta(n^{\alpha})$，则$\textsc{Insert}$和$\textsc{Decrease-Key}$操作的渐进运行时间是$\frac{1}{\alpha}$。$\textsc{Extract-Min}$的渐进运行时间是$\frac{n^{\alpha}}{\alpha}$。

    \noindent $\textbf{b}$. 设$d=|V|^{\varepsilon}$，由于是$\varepsilon$稠密，所以根据(a)可以得到$\textsc{Insert}$和$\textsc{Decrease-Key}$的渐进运行时间是$|V|$，$\textsc{Extract-Min}$的渐进运行时间是$|E|$。使用$\textsc{Dijkstra}$算法，则计算单元最短路径的运行时间为$O(E)$。

    \noindent $\textbf{c}$. 对于每个$v\in V$使用(b)中所诉的求解单源最短路径的方法，则可得到多元最短路径的渐进运行时间为$O(VE)$。

    \noindent $\textbf{d}$. 类似与$\textsc{Johnson}$算法，新建立一个结点$s$，其到所有结点的$w(s,x)=0$用来更新权重得到非负权重。在使用如(c)中所诉的算法，即可得到渐进运行时间为$V^2lgV+VE$，由于图为$\varepsilon$稠密图，所以$|E|=\Theta(V^{1+\varepsilon})$可得时间复杂度为$O(VE)$。

\end{solution}
%%%%%%%%%%

%%%%%%%%%%
% \begin{problem}[TC: 22.5-5]
%   % A problem here.
% \end{problem}
%
% \begin{solution}
%
% \end{solution}
%%%%%%%%%%

%%%%%%%%%%
% \begin{problem}[TC: 22.5-7]
%   % A problem here.
% \end{problem}
%
% \begin{solution}
%
% \end{solution}

%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%
\begincorrection	% begin the ``correction'' part (Optional)

% %%%%%%%%%%
% \begin{problem}[题号]
%   题目。
% \end{problem}

% \begin{cause}
%   简述错误原因（可选）。
% \end{cause}

% % Or use the ``solution'' environment
% \begin{revision}
%   正确解答。
% \end{revision}
% %%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%
\beginfb	% begin the feedback section (Optional)

% 你可以写：
% \begin{itemize}
%   \item 对课程及教师的建议与意见
%   \item 教材中不理解的内容
%   \item 希望深入了解的内容
%   \item 等
% \end{itemize}
% %%%%%%%%%%%%%%%%%%%%
\end{document}

% 可使用如下命令插入图片：
% \begin{figure}[!ht]
% \centering
% \includegraphics[scale=0.6]{1.png}
% % \caption{this is a figure demo}
% \label{fig:label}
% \end{figure}

% 插入数学公式：
% \begin{verbatim}
%   $E = mc^2$
% \end{verbatim}
% 得到 $E = mc^2$。
% \begin{verbatim}
%   \[
%     E = mc^2
%   \]
% \end{verbatim}
% 得到
% \[
%   E = mc^2
% \]

% The ``remark'' environments (when needed) must be 
% put before the ``solution''/``revision''/``proof'' environments.
% \begin{remark}	% Optional
%   以下解答参考了书籍/网站/讲义 $\ldots$。

%   \noindent 以下解答是与 XXX 同学讨论得到的。
% \end{remark}

% \newpage  % continue in a new page
% 可使用如下代码插入伪代码
% \begin{algorithm}
% \caption{DFS(G)}
% \label{alg1}
% \begin{algorithmic}
%     \STATE $time \gets time + 1$
%     \STATE $u.d\gets time$
%     \STATE $u.color \gets GRAY$
%     \STATE $push(u)$
%     \WHILE{$!empty(stack)$}
%     \STATE $u \gets top()$
%     \STATE $leaf \gets true$
%     \FOR{ each $v\in Adj[u]$ }
%     \IF{$v.color \gets WHITE$}
%     \STATE $v.color \gets GRAY$
%     \STATE $v.\pi \gets u$
%     \STATE $time \gets time + 1$
%     \STATE $v.d \gets time$
%     \STATE $push(v)$
%     \STATE $leaf \gets false$
%     \STATE $break$
%     \ENDIF
%     \ENDFOR
%     \IF{$leaf == true$}
%     \STATE $u.color \gets BLACK$
%     \STATE $time \gets time + 1$
%     \STATE $u.f \gets time$
%     \STATE $pop(u)$
%     \ENDIF
%     \ENDWHILE
% \end{algorithmic}
% \end{algorithm}

