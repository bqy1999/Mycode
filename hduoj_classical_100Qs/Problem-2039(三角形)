三角形

#include <iostream>
using namespace std;

int judge(double a, double b, double c){
    if(a+b>c&&a+c>b&&b+c>a)return 1;
    else return 0;

}

int main(){
    int n=0;
    double a,b,c=0;
    cin>>n;
    for (int i = 0; i < n; ++i) {
        cin>>a>>b>>c;
        if(judge(a,b,c))cout<<"YES"<<endl;
        else cout<<"NO"<<endl;
    }

    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------
#include <cstdio>
#include <iostream>
using namespace std;

const double eps=1e-8;
//这是一个宏定义，定义eps为常量，其值是1e-8；
//这是一种指数式表示方法，表示1*8^-8，即0.00000001


int cmp(double x){
    if(x>eps)return 1;//如果x+y-z的值大于允许的误差范围，就认为他们不是=0，那么cmp返回1，judge返回true
    else return 0;//如果x+y-z的值小于允许的误差范围，那么就认为他们=0，那么cmp返回0，judge返回false
}

bool judge(double x, double y, double z){
    if(cmp(x+y-z)>0)return true;
    else return false;
}

int main(){
    int t=0;
    scanf("%d",&t);
    while (t--){
        double x,y,z=0;
        scanf("%lf%lf%lf",&x,&y,&z);
        if(judge(x,y,z)&&judge(x,z,y)&&judge(y,z,x))printf("YES\n");
        else printf("NO\n");
    }
    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------
这题怎么说呢，我觉得有一点怪异
我的直觉告诉我这是考察高精度的小数存法，在测试数据中可能会有小数点后n位的情况
但是方案一仅仅是cin配合double就能够AC让我很惊讶
而我在尝试中使用scanf配合double却会WA，可能是因为没有宏定义eps的结果
eps就是浮点数运算中允许的误差范围

------------------------------------------------------------------------------------------------------------------------------------
算了，还是加一下高精度的模板吧:

#include <iostream>
#include <vector>
#include <string>
#include <cstdio>
#include <cstring>

using namespace std;

struct BigInteger{
    static const int BASE=100000000;
    static const int WIDTH=8;
    vector<int> s;
    
    BigInteger(long long num=0){*this = num; }  //构造函数
    BigInteger operator=(long long num){    //赋值运算符
        s.clear();
        do{
            s.push_back(num % BASE);
            num /= BASE;
        }while (num>0);
        return *this;
    }
    BigInteger operator=(const string& str){    //赋值运算符
        s.clear();
        int x, len = (str.length() - 1) / WIDTH +;
        for (int i = 0; i < len; ++i) {
            int end = str.length() - i*WIDTH;
            int start = max(0,end - WIDTH);
            sscanf(str.substr(start, end-start).c_str(),"%d", &x);
            s.push_back(x);
        }
        return *this;
    }
};

ostream& operator << (ostream &out, const BigInteger& x){   //重载运算符<<
    out<<x.s.back();
    for (int i = x.s.size(); i >=0 ; --i) {
        char buf[20];
        sprintf(buf, "%08d", x.s[i]);
        for (int j = 0; j < strlen(buf); ++j)out<<buf[j];
    }
    return out;
}

istream& operator >> (istream &in, BigInteger& x){  //重载运算符>>
    string s;
    if(!(in >> s))return in;
    x = s;
    return in;
}

